# Project Introduction

## Copy-on-Write fork() System Call in xv6 Kernel

- **Objective**: Developed an understanding of Unix-style forking and x86 memory management.
- **Implementation**: Implemented a copy-on-write fork() system call in the xv6 kernel.
  - **Details**: 
    - Wrote a trap handler for page faults.
    - Augmented the physical memory management code.
    - Manipulated page tables.

## Stride Scheduler Algorithm in xv6 Kernel

- **Objective**: Designed and implemented a Stride Scheduler algorithm in the xv6 kernel using C.
- **Algorithm**:
  - Assigned tickets to each process.
  - Calculated the stride for each process based on the number of tickets.
  - Scheduled the process with the minimum pass value in each time slot.
- **System Calls**:
  - `settickets(int number)`: Sets the number of tickets for a process.
  - `getpinfo(struct pstat*)`: Returns information about running processes.

## Performance Evaluation

- **Experiments**: Conducted experiments and generated graphs to demonstrate the performance improvement.
- **Results**:
  - Significant reduction in the time required for forking large processes due to copy-on-write implementation.
  - Improved CPU utilization and response time of the system with the Stride Scheduler algorithm.
- **Future Work**: The graphs and experiments can be used to further optimize the implementation and improve system performance.
