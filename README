Project Introduction:

Developed an understanding of Unix-style forking and x86 memory management by implementing a copy-on-write fork() system call in xv6 kernel. This involved writing a trap handler for page faults, augmenting the physical memory management code, and manipulating page tables.

Designed and implemented a Stride Scheduler algorithm in xv6 kernel using C. This algorithm assigns tickets to each process and calculates the stride for each process based on the number of tickets. It schedules the process with the minimum pass value in each time slot. Two new system calls were created: settickets(int number) and getpinfo(struct pstat*), which respectively set the number of tickets for a process and return information about running processes.

Conducted experiments and generated graphs to demonstrate the performance improvement achieved by implementing copy-on-write and Stride Scheduler in xv6 kernel. The implementation showed a significant reduction in the time required for forking large processes, while the Stride Scheduler algorithm improved the CPU utilization and response time of the system. The graphs and experiments can be used to further optimize the implementation and improve system performance.

